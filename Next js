Generator.prototype.next()
The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.

Syntax
next(value)
Copy to Clipboard
Parameters
value
The value to send to the generator.

The value will be assigned as a result of a yield expression. For example, in variable = yield expression, the value passed to the .next() function will be assigned to variable.

Return value
An Object with two properties:

done (boolean)
Has the value true if the iterator is past the end of the iterated sequence. In this case value optionally specifies the return value of the iterator.

Has the value false if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the done property altogether.

value
Any JavaScript value returned by the iterator. Can be omitted when done is true.
Examples
Using next()
The following example shows a simple generator and the object that the next method returns:

function* gen() {
  yield 1;
  yield 2;
  yield 3;
}

const g = gen(); // "Generator { }"
g.next();      // "Object { value: 1, done: false }"
g.next();      // "Object { value: 2, done: false }"
g.next();      // "Object { value: 3, done: false }"
g.next();      // "Object { value: undefined, done: true }"
Copy to Clipboard
Using next() with a list
function* getPage(pageSize = 1, list) {
    let output = [];
    let index = 0;

    while (index < list.length) {
        output = [];
        for (let i = index; i < index + pageSize; i++) {
            if (list[i]) {
                output.push(list[i]);
            }
        }

        yield output;
        index += pageSize;
    }
}

list = [1, 2, 3, 4, 5, 6, 7, 8]
var page = getPage(3, list);              // Generator { }

page.next();                              // Object {value: (3) [1, 2, 3], done: false}
page.next();                              // Object {value: (3) [4, 5, 6], done: false}
page.next();                              // Object {value: (2) [7, 8], done: false}
page.next();                              // Object {value: undefined, done: true}
Copy to Clipboard
Sending values to the generator
In this example, next is called with a value.

Note that the first call does not log anything, because the generator was not yielding anything initially.

function* gen() {
  while (true) {
    let value = yield null;
    console.log(value);
  }
}

const g = gen();
g.next(1);
// "{ value: null, done: false }"
g.next(2);
// 2
// "{ value: null, done: false }"
Copy to Clipboard
Specifications
Specification
ECMAScript Language Specification (ECMAScript)
# sec-generator.prototype.next
Browser compatibility
Report problems with this compatibility data on GitHub
next
ChromeFull support39
EdgeFull support13
FirefoxFull support26
Internet ExplorerNo supportNo
OperaFull support26
SafariFull support10
WebView AndroidFull support39
Chrome AndroidFull support39
Firefox for AndroidFull support26
Opera AndroidFull support26
Safari on iOSFull support10
Samsung InternetFull support4.0
Node.jsFull support4.0.0
Legend
Full supportFull support
No supportNo support
User must explicitly enable this feature.
See also
function*
Iterators and generators
Found a problem with this page?
Source on GitHub
Report a problem with this content on GitHub
Want to fix the problem yourself? See our Contribution guide.
Last modified: May 5, 2021, by MDN contributors

Change your language
Select your preferred language
English (US)
 Change language
Related Topics
Standard built-in objects
Generator
Methods
Generator.prototype.next()
Generator.prototype.return()
Generator.prototype.throw()
Inheritance:
Function
Properties
Function.arguments
Function.caller
Function.displayName
Function.length
Function.name
Methods
Function.prototype.apply()
Function.prototype.bind()
Function.prototype.call()
Function.prototype.toSource()
Function.prototype.toString()
Object
Properties
Object.prototype.constructor
Object.prototype.__proto__
Methods
Object.prototype.__defineGetter__()
Object.prototype.__defineSetter__()
Object.prototype.__lookupGetter__()
Object.prototype.__lookupSetter__()
Object.prototype.hasOwnProperty()
Object.prototype.isPrototypeOf()
Object.prototype.propertyIsEnumerable()
Object.setPrototypeOf()
Object.prototype.toLocaleString()
Object.prototype.toSource()
Object.prototype.toString()
Object.prototype.valueOf()
